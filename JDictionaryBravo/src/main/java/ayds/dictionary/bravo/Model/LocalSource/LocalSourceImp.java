package ayds.dictionary.bravo.Model.LocalSource;import ayds.dictionary.bravo.Model.Article;import ayds.dictionary.bravo.Model.Source;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;class LocalSourceImp implements LocalSource {    private static final String CREATE_TABLE = "create table if not exists terms (id INTEGER PRIMARY KEY AUTOINCREMENT," +            " term string, meaning string, source int)";    private static final String DATABASE_URL = "jdbc:sqlite:./dictionary.db";    LocalSourceImp() {        createNewDatabase();    }    private static void createNewDatabase() {        try (Connection connection = createConnection()) {            if (connection != null) {                Statement statement = createStatement(connection);                statement.executeUpdate(CREATE_TABLE);            }        } catch (SQLException e) {        }    }    public Article getMeaning(String term) {        Article article = null;        Connection connection = null;        try {            connection = createConnection();            Statement statement = createStatement(connection);            ResultSet rs = statement.executeQuery(selectTerm(term));            if (rs.next())                article = new Article(term, rs.getString("meaning"), Source.values()[(rs.getInt("source"))]);        } catch (SQLException errorGettingArticle) {        } finally {            closeConnection(connection);        }        return article;    }    private String selectTerm(String term) {        return "select * from terms WHERE term = '" + term + "'";    }    public void saveArticle(Article article) {        Connection connection = null;        if (article.hasMeaning()) {            try {                connection = createConnection();                Statement statement = createStatement(connection);                statement.executeUpdate(insertArticle(article));            } catch (SQLException errorSaving) {            } finally {                closeConnection(connection);            }        }    }    private String insertArticle(Article article) {        String term=article.getTerm();        String meaning=article.getMeaning();        int source=article.getSource().ordinal();        return "insert into terms values(null, '" + term + "', '" + meaning + "', " + source + ")";    }    private static Connection createConnection() throws SQLException {        return DriverManager.getConnection(DATABASE_URL);    }    private static Statement createStatement(Connection connection) throws SQLException {        Statement statement = connection.createStatement();        statement.setQueryTimeout(30);        return statement;    }    private void closeConnection(Connection connection) {        try {            if (connection != null)                connection.close();        } catch (SQLException connectionCloseFailed) {        }    }}