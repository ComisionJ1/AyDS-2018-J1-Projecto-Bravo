package ayds.dictionary.bravo.Model.LocalSource;import ayds.dictionary.bravo.Model.Article;import ayds.dictionary.bravo.Model.Source;import java.sql.*;class LocalSourceImp implements LocalSource {    private static final String CREATE_TABLE = "create table if not exists terms (id INTEGER PRIMARY KEY AUTOINCREMENT," +            " term string, meaning string, source int)";    private static final String DATABASE_URL = "jdbc:sqlite:./dictionary.db";    LocalSourceImp() {        createNewDatabase();    }    private static void createNewDatabase() {        try (Connection connection = createConnection()) {            if (connection != null) {                Statement statement = createStatement(connection);                statement.executeUpdate(CREATE_TABLE);            }        } catch (SQLException e) {            throw new DBError();        }    }    public Article getMeaning(String term) {        Article article = null;        Connection connection = createConnection();        Statement statement = createStatement(connection);        try {            ResultSet rs = statement.executeQuery(selectTerm(term));            if (rs.next()) {                Source source = Source.values()[(rs.getInt("source"))];                article = new Article(term, rs.getString("meaning"), source);            }        } catch (SQLException errorGettingArticle) {            throw new DBError();        } finally {            closeConnection(connection);        }        return article;    }    private String selectTerm(String term) {        return "select * from terms WHERE term = '" + term + "'";    }    public void saveArticle(Article article) {        Connection connection = null;        if (article.hasMeaning()) {            try {                connection = createConnection();                Statement statement = createStatement(connection);                statement.executeUpdate(insertArticle(article));            } catch (SQLException errorSaving) {                throw new DBError();            } finally {                closeConnection(connection);            }        }    }    private String insertArticle(Article article) {        String term = article.getTerm();        String meaning = article.getMeaning();        int source = article.getSource().ordinal();        return "insert into terms values(null, '" + term + "', '" + meaning + "', " + source + ")";    }    private static Connection createConnection() {        Connection connection;        try {            connection = DriverManager.getConnection(DATABASE_URL);        } catch (SQLException e) {            throw new DBError();        }        return connection;    }    private static Statement createStatement(Connection connection) {        Statement statement;        try {            statement = connection.createStatement();            statement.setQueryTimeout(30);        } catch (SQLException e) {            throw new DBError();        }        return statement;    }    private void closeConnection(Connection connection) {        try {            if (connection != null)                connection.close();        } catch (SQLException e) {            throw new DBError();        }    }}